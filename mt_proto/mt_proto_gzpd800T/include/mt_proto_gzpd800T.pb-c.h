/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mt_proto_gzpd800T.proto */

#ifndef PROTOBUF_C_mt_5fproto_5fgzpd800T_2eproto__INCLUDED
#define PROTOBUF_C_mt_5fproto_5fgzpd800T_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/empty.pb-c.h"

typedef struct _Data Data;
typedef struct _DataRes DataRes;


/* --- enums --- */


/* --- messages --- */

struct  _Data
{
  ProtobufCMessage base;
  /*
   * 局放传感器编号
   */
  int32_t addr;
  /*
   * 幅值
   */
  uint32_t amp;
  /*
   * 频率
   */
  uint32_t freq;
  /*
   * 总能量
   */
  uint32_t power;
  /*
   * 报警状态
   */
  protobuf_c_boolean warn;
};
#define DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _DataRes
{
  ProtobufCMessage base;
  int32_t rescode;
  size_t n_datas;
  Data **datas;
};
#define DATA_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_res__descriptor) \
    , 0, 0,NULL }


/* Data methods */
void   data__init
                     (Data         *message);
size_t data__get_packed_size
                     (const Data   *message);
size_t data__pack
                     (const Data   *message,
                      uint8_t             *out);
size_t data__pack_to_buffer
                     (const Data   *message,
                      ProtobufCBuffer     *buffer);
Data *
       data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data__free_unpacked
                     (Data *message,
                      ProtobufCAllocator *allocator);
/* DataRes methods */
void   data_res__init
                     (DataRes         *message);
size_t data_res__get_packed_size
                     (const DataRes   *message);
size_t data_res__pack
                     (const DataRes   *message,
                      uint8_t             *out);
size_t data_res__pack_to_buffer
                     (const DataRes   *message,
                      ProtobufCBuffer     *buffer);
DataRes *
       data_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data_res__free_unpacked
                     (DataRes *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Data_Closure)
                 (const Data *message,
                  void *closure_data);
typedef void (*DataRes_Closure)
                 (const DataRes *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Gzpd800TService_Service Gzpd800TService_Service;
struct _Gzpd800TService_Service
{
  ProtobufCService base;
  void (*get_data)(Gzpd800TService_Service *service,
                   const Google__Protobuf__Empty *input,
                   DataRes_Closure closure,
                   void *closure_data);
};
typedef void (*Gzpd800TService_ServiceDestroy)(Gzpd800TService_Service *);
void gzpd800_tservice__init (Gzpd800TService_Service *service,
                             Gzpd800TService_ServiceDestroy destroy);
#define GZPD800_TSERVICE__BASE_INIT \
    { &gzpd800_tservice__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GZPD800_TSERVICE__INIT(function_prefix__) \
    { GZPD800_TSERVICE__BASE_INIT,\
      function_prefix__ ## get_data  }
void gzpd800_tservice__get_data(ProtobufCService *service,
                                const Google__Protobuf__Empty *input,
                                DataRes_Closure closure,
                                void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor data__descriptor;
extern const ProtobufCMessageDescriptor data_res__descriptor;
extern const ProtobufCServiceDescriptor gzpd800_tservice__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mt_5fproto_5fgzpd800T_2eproto__INCLUDED */
