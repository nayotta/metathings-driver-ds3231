/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mt_proto_airswitch001.proto */

#ifndef PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED
#define PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/wrappers.pb-c.h"

typedef struct _MtAirswitch001__State MtAirswitch001__State;
typedef struct _MtAirswitch001__OpState MtAirswitch001__OpState;
typedef struct _MtAirswitch001__Ctrl MtAirswitch001__Ctrl;
typedef struct _MtAirswitch001__Warn MtAirswitch001__Warn;
typedef struct _MtAirswitch001__Data MtAirswitch001__Data;
typedef struct _MtAirswitch001__Config MtAirswitch001__Config;
typedef struct _MtAirswitch001__OpConfig MtAirswitch001__OpConfig;
typedef struct _MtAirswitch001__Quality MtAirswitch001__Quality;
typedef struct _MtAirswitch001__OpQuality MtAirswitch001__OpQuality;
typedef struct _MtAirswitch001__GetReq MtAirswitch001__GetReq;
typedef struct _MtAirswitch001__SetRes MtAirswitch001__SetRes;
typedef struct _MtAirswitch001__GetStateRes MtAirswitch001__GetStateRes;
typedef struct _MtAirswitch001__GetCtrlRes MtAirswitch001__GetCtrlRes;
typedef struct _MtAirswitch001__GetWarnRes MtAirswitch001__GetWarnRes;
typedef struct _MtAirswitch001__GetDataRes MtAirswitch001__GetDataRes;
typedef struct _MtAirswitch001__GetConfigRes MtAirswitch001__GetConfigRes;
typedef struct _MtAirswitch001__GetQualityRes MtAirswitch001__GetQualityRes;
typedef struct _MtAirswitch001__SetStateReq MtAirswitch001__SetStateReq;
typedef struct _MtAirswitch001__SetConfigReq MtAirswitch001__SetConfigReq;
typedef struct _MtAirswitch001__SetQualityReq MtAirswitch001__SetQualityReq;
typedef struct _MtAirswitch001__SetLeakTestReq MtAirswitch001__SetLeakTestReq;


/* --- enums --- */


/* --- messages --- */

struct  _MtAirswitch001__State
{
  ProtobufCMessage base;
  /*
   * true:打开 false:关闭
   */
  protobuf_c_boolean data;
};
#define MT_AIRSWITCH001__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__state__descriptor) \
    , 0 }


struct  _MtAirswitch001__OpState
{
  ProtobufCMessage base;
  /*
   * true:打开 false:关闭
   */
  Google__Protobuf__BoolValue *data;
};
#define MT_AIRSWITCH001__OP_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__op_state__descriptor) \
    , NULL }


struct  _MtAirswitch001__Ctrl
{
  ProtobufCMessage base;
  /*
   * true:可以控制 false:不能控制
   */
  protobuf_c_boolean data;
};
#define MT_AIRSWITCH001__CTRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__ctrl__descriptor) \
    , 0 }


struct  _MtAirswitch001__Warn
{
  ProtobufCMessage base;
  /*
   * 电流预警
   */
  protobuf_c_boolean notecurrent;
  /*
   * 漏电预警
   */
  protobuf_c_boolean noteleak;
  /*
   * 欠压预警
   */
  protobuf_c_boolean notevotagelow;
  /*
   * 过压预警
   */
  protobuf_c_boolean notevotagehigh;
  /*
   * 欠压报警
   */
  protobuf_c_boolean warnvotagelow;
  /*
   * 打火报警
   */
  protobuf_c_boolean warnfire;
  /*
   * 过压报警
   */
  protobuf_c_boolean warnvotagehigh;
  /*
   * 过流报警
   */
  protobuf_c_boolean warncurrent;
  /*
   * 漏电报警
   */
  protobuf_c_boolean warnleak;
  /*
   * 温度报警
   */
  protobuf_c_boolean warntemphigh;
  /*
   * 过载报警
   */
  protobuf_c_boolean warnpowrhigh;
  /*
   * 浪涌报警
   */
  protobuf_c_boolean warnwave;
  /*
   * 短路报警
   */
  protobuf_c_boolean warnshort;
};
#define MT_AIRSWITCH001__WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__warn__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _MtAirswitch001__Data
{
  ProtobufCMessage base;
  /*
   * 电压 V
   */
  float votage;
  /*
   * 漏电流 A
   */
  float leakcurrent;
  /*
   * 功率 W
   */
  float power;
  /*
   * 温度 ℃
   */
  float temp;
  /*
   * 电流 A
   */
  float current;
  /*
   * 开关状态 true:打开 false:关闭
   */
  protobuf_c_boolean state;
  /*
   * 控制状态 true:可以控制 false:不能控制
   */
  protobuf_c_boolean ctrl;
};
#define MT_AIRSWITCH001__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _MtAirswitch001__Config
{
  ProtobufCMessage base;
  /*
   * 电压上限 V
   */
  float votagehigh;
  /*
   * 电压下限 V 
   */
  float votagelow;
  /*
   * 漏电流上限 A
   */
  float leakcurrenthigh;
  /*
   * 功率上限 W
   */
  float powerhigh;
  /*
   * 温度上限 ℃
   */
  float temphigh;
  /*
   * 电流上限 A
   */
  float currenthigh;
};
#define MT_AIRSWITCH001__CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__config__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _MtAirswitch001__OpConfig
{
  ProtobufCMessage base;
  /*
   * 电压上限 V
   */
  Google__Protobuf__FloatValue *votagehigh;
  /*
   * 电压下限 V 
   */
  Google__Protobuf__FloatValue *votagelow;
  /*
   * 漏电流上限 A
   */
  Google__Protobuf__FloatValue *leakcurrenthigh;
  /*
   * 功率上限 W
   */
  Google__Protobuf__FloatValue *powerhigh;
  /*
   * 温度上限 ℃
   */
  Google__Protobuf__FloatValue *temphigh;
  /*
   * 电流上限 A
   */
  Google__Protobuf__FloatValue *currenthigh;
};
#define MT_AIRSWITCH001__OP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__op_config__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _MtAirswitch001__Quality
{
  ProtobufCMessage base;
  /*
   * 电量 kwh
   */
  float quality;
};
#define MT_AIRSWITCH001__QUALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__quality__descriptor) \
    , 0 }


struct  _MtAirswitch001__OpQuality
{
  ProtobufCMessage base;
  /*
   * 电量 kwh
   */
  Google__Protobuf__FloatValue *quality;
};
#define MT_AIRSWITCH001__OP_QUALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__op_quality__descriptor) \
    , NULL }


struct  _MtAirswitch001__GetReq
{
  ProtobufCMessage base;
  int32_t addr;
};
#define MT_AIRSWITCH001__GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_req__descriptor) \
    , 0 }


struct  _MtAirswitch001__SetRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
};
#define MT_AIRSWITCH001__SET_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__set_res__descriptor) \
    , 0, 0 }


struct  _MtAirswitch001__GetStateRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__State *state;
};
#define MT_AIRSWITCH001__GET_STATE_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_state_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__GetCtrlRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__Ctrl *ctrl;
};
#define MT_AIRSWITCH001__GET_CTRL_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_ctrl_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__GetWarnRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__Warn *warn;
};
#define MT_AIRSWITCH001__GET_WARN_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_warn_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__GetDataRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__Data *data;
};
#define MT_AIRSWITCH001__GET_DATA_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_data_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__GetConfigRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__Config *config;
};
#define MT_AIRSWITCH001__GET_CONFIG_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_config_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__GetQualityRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  MtAirswitch001__Quality *quality;
};
#define MT_AIRSWITCH001__GET_QUALITY_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__get_quality_res__descriptor) \
    , 0, 0, NULL }


struct  _MtAirswitch001__SetStateReq
{
  ProtobufCMessage base;
  int32_t addr;
  MtAirswitch001__OpState *state;
};
#define MT_AIRSWITCH001__SET_STATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__set_state_req__descriptor) \
    , 0, NULL }


struct  _MtAirswitch001__SetConfigReq
{
  ProtobufCMessage base;
  int32_t addr;
  MtAirswitch001__OpConfig *config;
};
#define MT_AIRSWITCH001__SET_CONFIG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__set_config_req__descriptor) \
    , 0, NULL }


struct  _MtAirswitch001__SetQualityReq
{
  ProtobufCMessage base;
  int32_t addr;
  MtAirswitch001__OpQuality *quality;
};
#define MT_AIRSWITCH001__SET_QUALITY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__set_quality_req__descriptor) \
    , 0, NULL }


struct  _MtAirswitch001__SetLeakTestReq
{
  ProtobufCMessage base;
  int32_t addr;
};
#define MT_AIRSWITCH001__SET_LEAK_TEST_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mt_airswitch001__set_leak_test_req__descriptor) \
    , 0 }


/* MtAirswitch001__State methods */
void   mt_airswitch001__state__init
                     (MtAirswitch001__State         *message);
size_t mt_airswitch001__state__get_packed_size
                     (const MtAirswitch001__State   *message);
size_t mt_airswitch001__state__pack
                     (const MtAirswitch001__State   *message,
                      uint8_t             *out);
size_t mt_airswitch001__state__pack_to_buffer
                     (const MtAirswitch001__State   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__State *
       mt_airswitch001__state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__state__free_unpacked
                     (MtAirswitch001__State *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__OpState methods */
void   mt_airswitch001__op_state__init
                     (MtAirswitch001__OpState         *message);
size_t mt_airswitch001__op_state__get_packed_size
                     (const MtAirswitch001__OpState   *message);
size_t mt_airswitch001__op_state__pack
                     (const MtAirswitch001__OpState   *message,
                      uint8_t             *out);
size_t mt_airswitch001__op_state__pack_to_buffer
                     (const MtAirswitch001__OpState   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__OpState *
       mt_airswitch001__op_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__op_state__free_unpacked
                     (MtAirswitch001__OpState *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__Ctrl methods */
void   mt_airswitch001__ctrl__init
                     (MtAirswitch001__Ctrl         *message);
size_t mt_airswitch001__ctrl__get_packed_size
                     (const MtAirswitch001__Ctrl   *message);
size_t mt_airswitch001__ctrl__pack
                     (const MtAirswitch001__Ctrl   *message,
                      uint8_t             *out);
size_t mt_airswitch001__ctrl__pack_to_buffer
                     (const MtAirswitch001__Ctrl   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__Ctrl *
       mt_airswitch001__ctrl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__ctrl__free_unpacked
                     (MtAirswitch001__Ctrl *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__Warn methods */
void   mt_airswitch001__warn__init
                     (MtAirswitch001__Warn         *message);
size_t mt_airswitch001__warn__get_packed_size
                     (const MtAirswitch001__Warn   *message);
size_t mt_airswitch001__warn__pack
                     (const MtAirswitch001__Warn   *message,
                      uint8_t             *out);
size_t mt_airswitch001__warn__pack_to_buffer
                     (const MtAirswitch001__Warn   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__Warn *
       mt_airswitch001__warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__warn__free_unpacked
                     (MtAirswitch001__Warn *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__Data methods */
void   mt_airswitch001__data__init
                     (MtAirswitch001__Data         *message);
size_t mt_airswitch001__data__get_packed_size
                     (const MtAirswitch001__Data   *message);
size_t mt_airswitch001__data__pack
                     (const MtAirswitch001__Data   *message,
                      uint8_t             *out);
size_t mt_airswitch001__data__pack_to_buffer
                     (const MtAirswitch001__Data   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__Data *
       mt_airswitch001__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__data__free_unpacked
                     (MtAirswitch001__Data *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__Config methods */
void   mt_airswitch001__config__init
                     (MtAirswitch001__Config         *message);
size_t mt_airswitch001__config__get_packed_size
                     (const MtAirswitch001__Config   *message);
size_t mt_airswitch001__config__pack
                     (const MtAirswitch001__Config   *message,
                      uint8_t             *out);
size_t mt_airswitch001__config__pack_to_buffer
                     (const MtAirswitch001__Config   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__Config *
       mt_airswitch001__config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__config__free_unpacked
                     (MtAirswitch001__Config *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__OpConfig methods */
void   mt_airswitch001__op_config__init
                     (MtAirswitch001__OpConfig         *message);
size_t mt_airswitch001__op_config__get_packed_size
                     (const MtAirswitch001__OpConfig   *message);
size_t mt_airswitch001__op_config__pack
                     (const MtAirswitch001__OpConfig   *message,
                      uint8_t             *out);
size_t mt_airswitch001__op_config__pack_to_buffer
                     (const MtAirswitch001__OpConfig   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__OpConfig *
       mt_airswitch001__op_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__op_config__free_unpacked
                     (MtAirswitch001__OpConfig *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__Quality methods */
void   mt_airswitch001__quality__init
                     (MtAirswitch001__Quality         *message);
size_t mt_airswitch001__quality__get_packed_size
                     (const MtAirswitch001__Quality   *message);
size_t mt_airswitch001__quality__pack
                     (const MtAirswitch001__Quality   *message,
                      uint8_t             *out);
size_t mt_airswitch001__quality__pack_to_buffer
                     (const MtAirswitch001__Quality   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__Quality *
       mt_airswitch001__quality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__quality__free_unpacked
                     (MtAirswitch001__Quality *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__OpQuality methods */
void   mt_airswitch001__op_quality__init
                     (MtAirswitch001__OpQuality         *message);
size_t mt_airswitch001__op_quality__get_packed_size
                     (const MtAirswitch001__OpQuality   *message);
size_t mt_airswitch001__op_quality__pack
                     (const MtAirswitch001__OpQuality   *message,
                      uint8_t             *out);
size_t mt_airswitch001__op_quality__pack_to_buffer
                     (const MtAirswitch001__OpQuality   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__OpQuality *
       mt_airswitch001__op_quality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__op_quality__free_unpacked
                     (MtAirswitch001__OpQuality *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetReq methods */
void   mt_airswitch001__get_req__init
                     (MtAirswitch001__GetReq         *message);
size_t mt_airswitch001__get_req__get_packed_size
                     (const MtAirswitch001__GetReq   *message);
size_t mt_airswitch001__get_req__pack
                     (const MtAirswitch001__GetReq   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_req__pack_to_buffer
                     (const MtAirswitch001__GetReq   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetReq *
       mt_airswitch001__get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_req__free_unpacked
                     (MtAirswitch001__GetReq *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__SetRes methods */
void   mt_airswitch001__set_res__init
                     (MtAirswitch001__SetRes         *message);
size_t mt_airswitch001__set_res__get_packed_size
                     (const MtAirswitch001__SetRes   *message);
size_t mt_airswitch001__set_res__pack
                     (const MtAirswitch001__SetRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__set_res__pack_to_buffer
                     (const MtAirswitch001__SetRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__SetRes *
       mt_airswitch001__set_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__set_res__free_unpacked
                     (MtAirswitch001__SetRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetStateRes methods */
void   mt_airswitch001__get_state_res__init
                     (MtAirswitch001__GetStateRes         *message);
size_t mt_airswitch001__get_state_res__get_packed_size
                     (const MtAirswitch001__GetStateRes   *message);
size_t mt_airswitch001__get_state_res__pack
                     (const MtAirswitch001__GetStateRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_state_res__pack_to_buffer
                     (const MtAirswitch001__GetStateRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetStateRes *
       mt_airswitch001__get_state_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_state_res__free_unpacked
                     (MtAirswitch001__GetStateRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetCtrlRes methods */
void   mt_airswitch001__get_ctrl_res__init
                     (MtAirswitch001__GetCtrlRes         *message);
size_t mt_airswitch001__get_ctrl_res__get_packed_size
                     (const MtAirswitch001__GetCtrlRes   *message);
size_t mt_airswitch001__get_ctrl_res__pack
                     (const MtAirswitch001__GetCtrlRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_ctrl_res__pack_to_buffer
                     (const MtAirswitch001__GetCtrlRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetCtrlRes *
       mt_airswitch001__get_ctrl_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_ctrl_res__free_unpacked
                     (MtAirswitch001__GetCtrlRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetWarnRes methods */
void   mt_airswitch001__get_warn_res__init
                     (MtAirswitch001__GetWarnRes         *message);
size_t mt_airswitch001__get_warn_res__get_packed_size
                     (const MtAirswitch001__GetWarnRes   *message);
size_t mt_airswitch001__get_warn_res__pack
                     (const MtAirswitch001__GetWarnRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_warn_res__pack_to_buffer
                     (const MtAirswitch001__GetWarnRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetWarnRes *
       mt_airswitch001__get_warn_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_warn_res__free_unpacked
                     (MtAirswitch001__GetWarnRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetDataRes methods */
void   mt_airswitch001__get_data_res__init
                     (MtAirswitch001__GetDataRes         *message);
size_t mt_airswitch001__get_data_res__get_packed_size
                     (const MtAirswitch001__GetDataRes   *message);
size_t mt_airswitch001__get_data_res__pack
                     (const MtAirswitch001__GetDataRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_data_res__pack_to_buffer
                     (const MtAirswitch001__GetDataRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetDataRes *
       mt_airswitch001__get_data_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_data_res__free_unpacked
                     (MtAirswitch001__GetDataRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetConfigRes methods */
void   mt_airswitch001__get_config_res__init
                     (MtAirswitch001__GetConfigRes         *message);
size_t mt_airswitch001__get_config_res__get_packed_size
                     (const MtAirswitch001__GetConfigRes   *message);
size_t mt_airswitch001__get_config_res__pack
                     (const MtAirswitch001__GetConfigRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_config_res__pack_to_buffer
                     (const MtAirswitch001__GetConfigRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetConfigRes *
       mt_airswitch001__get_config_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_config_res__free_unpacked
                     (MtAirswitch001__GetConfigRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__GetQualityRes methods */
void   mt_airswitch001__get_quality_res__init
                     (MtAirswitch001__GetQualityRes         *message);
size_t mt_airswitch001__get_quality_res__get_packed_size
                     (const MtAirswitch001__GetQualityRes   *message);
size_t mt_airswitch001__get_quality_res__pack
                     (const MtAirswitch001__GetQualityRes   *message,
                      uint8_t             *out);
size_t mt_airswitch001__get_quality_res__pack_to_buffer
                     (const MtAirswitch001__GetQualityRes   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__GetQualityRes *
       mt_airswitch001__get_quality_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__get_quality_res__free_unpacked
                     (MtAirswitch001__GetQualityRes *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__SetStateReq methods */
void   mt_airswitch001__set_state_req__init
                     (MtAirswitch001__SetStateReq         *message);
size_t mt_airswitch001__set_state_req__get_packed_size
                     (const MtAirswitch001__SetStateReq   *message);
size_t mt_airswitch001__set_state_req__pack
                     (const MtAirswitch001__SetStateReq   *message,
                      uint8_t             *out);
size_t mt_airswitch001__set_state_req__pack_to_buffer
                     (const MtAirswitch001__SetStateReq   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__SetStateReq *
       mt_airswitch001__set_state_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__set_state_req__free_unpacked
                     (MtAirswitch001__SetStateReq *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__SetConfigReq methods */
void   mt_airswitch001__set_config_req__init
                     (MtAirswitch001__SetConfigReq         *message);
size_t mt_airswitch001__set_config_req__get_packed_size
                     (const MtAirswitch001__SetConfigReq   *message);
size_t mt_airswitch001__set_config_req__pack
                     (const MtAirswitch001__SetConfigReq   *message,
                      uint8_t             *out);
size_t mt_airswitch001__set_config_req__pack_to_buffer
                     (const MtAirswitch001__SetConfigReq   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__SetConfigReq *
       mt_airswitch001__set_config_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__set_config_req__free_unpacked
                     (MtAirswitch001__SetConfigReq *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__SetQualityReq methods */
void   mt_airswitch001__set_quality_req__init
                     (MtAirswitch001__SetQualityReq         *message);
size_t mt_airswitch001__set_quality_req__get_packed_size
                     (const MtAirswitch001__SetQualityReq   *message);
size_t mt_airswitch001__set_quality_req__pack
                     (const MtAirswitch001__SetQualityReq   *message,
                      uint8_t             *out);
size_t mt_airswitch001__set_quality_req__pack_to_buffer
                     (const MtAirswitch001__SetQualityReq   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__SetQualityReq *
       mt_airswitch001__set_quality_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__set_quality_req__free_unpacked
                     (MtAirswitch001__SetQualityReq *message,
                      ProtobufCAllocator *allocator);
/* MtAirswitch001__SetLeakTestReq methods */
void   mt_airswitch001__set_leak_test_req__init
                     (MtAirswitch001__SetLeakTestReq         *message);
size_t mt_airswitch001__set_leak_test_req__get_packed_size
                     (const MtAirswitch001__SetLeakTestReq   *message);
size_t mt_airswitch001__set_leak_test_req__pack
                     (const MtAirswitch001__SetLeakTestReq   *message,
                      uint8_t             *out);
size_t mt_airswitch001__set_leak_test_req__pack_to_buffer
                     (const MtAirswitch001__SetLeakTestReq   *message,
                      ProtobufCBuffer     *buffer);
MtAirswitch001__SetLeakTestReq *
       mt_airswitch001__set_leak_test_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mt_airswitch001__set_leak_test_req__free_unpacked
                     (MtAirswitch001__SetLeakTestReq *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MtAirswitch001__State_Closure)
                 (const MtAirswitch001__State *message,
                  void *closure_data);
typedef void (*MtAirswitch001__OpState_Closure)
                 (const MtAirswitch001__OpState *message,
                  void *closure_data);
typedef void (*MtAirswitch001__Ctrl_Closure)
                 (const MtAirswitch001__Ctrl *message,
                  void *closure_data);
typedef void (*MtAirswitch001__Warn_Closure)
                 (const MtAirswitch001__Warn *message,
                  void *closure_data);
typedef void (*MtAirswitch001__Data_Closure)
                 (const MtAirswitch001__Data *message,
                  void *closure_data);
typedef void (*MtAirswitch001__Config_Closure)
                 (const MtAirswitch001__Config *message,
                  void *closure_data);
typedef void (*MtAirswitch001__OpConfig_Closure)
                 (const MtAirswitch001__OpConfig *message,
                  void *closure_data);
typedef void (*MtAirswitch001__Quality_Closure)
                 (const MtAirswitch001__Quality *message,
                  void *closure_data);
typedef void (*MtAirswitch001__OpQuality_Closure)
                 (const MtAirswitch001__OpQuality *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetReq_Closure)
                 (const MtAirswitch001__GetReq *message,
                  void *closure_data);
typedef void (*MtAirswitch001__SetRes_Closure)
                 (const MtAirswitch001__SetRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetStateRes_Closure)
                 (const MtAirswitch001__GetStateRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetCtrlRes_Closure)
                 (const MtAirswitch001__GetCtrlRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetWarnRes_Closure)
                 (const MtAirswitch001__GetWarnRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetDataRes_Closure)
                 (const MtAirswitch001__GetDataRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetConfigRes_Closure)
                 (const MtAirswitch001__GetConfigRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__GetQualityRes_Closure)
                 (const MtAirswitch001__GetQualityRes *message,
                  void *closure_data);
typedef void (*MtAirswitch001__SetStateReq_Closure)
                 (const MtAirswitch001__SetStateReq *message,
                  void *closure_data);
typedef void (*MtAirswitch001__SetConfigReq_Closure)
                 (const MtAirswitch001__SetConfigReq *message,
                  void *closure_data);
typedef void (*MtAirswitch001__SetQualityReq_Closure)
                 (const MtAirswitch001__SetQualityReq *message,
                  void *closure_data);
typedef void (*MtAirswitch001__SetLeakTestReq_Closure)
                 (const MtAirswitch001__SetLeakTestReq *message,
                  void *closure_data);

/* --- services --- */

typedef struct _MtAirswitch001__Service_Service MtAirswitch001__Service_Service;
struct _MtAirswitch001__Service_Service
{
  ProtobufCService base;
  void (*get_state)(MtAirswitch001__Service_Service *service,
                    const MtAirswitch001__GetReq *input,
                    MtAirswitch001__GetStateRes_Closure closure,
                    void *closure_data);
  void (*get_ctrl)(MtAirswitch001__Service_Service *service,
                   const MtAirswitch001__GetReq *input,
                   MtAirswitch001__GetCtrlRes_Closure closure,
                   void *closure_data);
  void (*get_warn)(MtAirswitch001__Service_Service *service,
                   const MtAirswitch001__GetReq *input,
                   MtAirswitch001__GetWarnRes_Closure closure,
                   void *closure_data);
  void (*get_data)(MtAirswitch001__Service_Service *service,
                   const MtAirswitch001__GetReq *input,
                   MtAirswitch001__GetDataRes_Closure closure,
                   void *closure_data);
  void (*get_config)(MtAirswitch001__Service_Service *service,
                     const MtAirswitch001__GetReq *input,
                     MtAirswitch001__GetConfigRes_Closure closure,
                     void *closure_data);
  void (*get_quality)(MtAirswitch001__Service_Service *service,
                      const MtAirswitch001__GetReq *input,
                      MtAirswitch001__GetQualityRes_Closure closure,
                      void *closure_data);
  void (*set_state)(MtAirswitch001__Service_Service *service,
                    const MtAirswitch001__SetStateReq *input,
                    MtAirswitch001__SetRes_Closure closure,
                    void *closure_data);
  void (*set_config)(MtAirswitch001__Service_Service *service,
                     const MtAirswitch001__SetConfigReq *input,
                     MtAirswitch001__SetRes_Closure closure,
                     void *closure_data);
  void (*set_quality)(MtAirswitch001__Service_Service *service,
                      const MtAirswitch001__SetQualityReq *input,
                      MtAirswitch001__SetRes_Closure closure,
                      void *closure_data);
  void (*set_leak_test)(MtAirswitch001__Service_Service *service,
                        const MtAirswitch001__SetLeakTestReq *input,
                        MtAirswitch001__SetRes_Closure closure,
                        void *closure_data);
};
typedef void (*MtAirswitch001__Service_ServiceDestroy)(MtAirswitch001__Service_Service *);
void mt_airswitch001__service__init (MtAirswitch001__Service_Service *service,
                                     MtAirswitch001__Service_ServiceDestroy destroy);
#define MT_AIRSWITCH001__SERVICE__BASE_INIT \
    { &mt_airswitch001__service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define MT_AIRSWITCH001__SERVICE__INIT(function_prefix__) \
    { MT_AIRSWITCH001__SERVICE__BASE_INIT,\
      function_prefix__ ## get_state,\
      function_prefix__ ## get_ctrl,\
      function_prefix__ ## get_warn,\
      function_prefix__ ## get_data,\
      function_prefix__ ## get_config,\
      function_prefix__ ## get_quality,\
      function_prefix__ ## set_state,\
      function_prefix__ ## set_config,\
      function_prefix__ ## set_quality,\
      function_prefix__ ## set_leak_test  }
void mt_airswitch001__service__get_state(ProtobufCService *service,
                                         const MtAirswitch001__GetReq *input,
                                         MtAirswitch001__GetStateRes_Closure closure,
                                         void *closure_data);
void mt_airswitch001__service__get_ctrl(ProtobufCService *service,
                                        const MtAirswitch001__GetReq *input,
                                        MtAirswitch001__GetCtrlRes_Closure closure,
                                        void *closure_data);
void mt_airswitch001__service__get_warn(ProtobufCService *service,
                                        const MtAirswitch001__GetReq *input,
                                        MtAirswitch001__GetWarnRes_Closure closure,
                                        void *closure_data);
void mt_airswitch001__service__get_data(ProtobufCService *service,
                                        const MtAirswitch001__GetReq *input,
                                        MtAirswitch001__GetDataRes_Closure closure,
                                        void *closure_data);
void mt_airswitch001__service__get_config(ProtobufCService *service,
                                          const MtAirswitch001__GetReq *input,
                                          MtAirswitch001__GetConfigRes_Closure closure,
                                          void *closure_data);
void mt_airswitch001__service__get_quality(ProtobufCService *service,
                                           const MtAirswitch001__GetReq *input,
                                           MtAirswitch001__GetQualityRes_Closure closure,
                                           void *closure_data);
void mt_airswitch001__service__set_state(ProtobufCService *service,
                                         const MtAirswitch001__SetStateReq *input,
                                         MtAirswitch001__SetRes_Closure closure,
                                         void *closure_data);
void mt_airswitch001__service__set_config(ProtobufCService *service,
                                          const MtAirswitch001__SetConfigReq *input,
                                          MtAirswitch001__SetRes_Closure closure,
                                          void *closure_data);
void mt_airswitch001__service__set_quality(ProtobufCService *service,
                                           const MtAirswitch001__SetQualityReq *input,
                                           MtAirswitch001__SetRes_Closure closure,
                                           void *closure_data);
void mt_airswitch001__service__set_leak_test(ProtobufCService *service,
                                             const MtAirswitch001__SetLeakTestReq *input,
                                             MtAirswitch001__SetRes_Closure closure,
                                             void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mt_airswitch001__state__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__op_state__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__ctrl__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__warn__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__data__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__config__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__op_config__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__quality__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__op_quality__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_req__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__set_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_state_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_ctrl_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_warn_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_data_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_config_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__get_quality_res__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__set_state_req__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__set_config_req__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__set_quality_req__descriptor;
extern const ProtobufCMessageDescriptor mt_airswitch001__set_leak_test_req__descriptor;
extern const ProtobufCServiceDescriptor mt_airswitch001__service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED */
