/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mt_proto_ota.proto */

#ifndef PROTOBUF_C_mt_5fproto_5fota_2eproto__INCLUDED
#define PROTOBUF_C_mt_5fproto_5fota_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/empty.pb-c.h"
#include "google/protobuf/wrappers.pb-c.h"

typedef struct _Version Version;
typedef struct _GetVersionRes GetVersionRes;
typedef struct _OpOtaUpdate OpOtaUpdate;
typedef struct _OtaUpdateReq OtaUpdateReq;
typedef struct _OtaUpdateRes OtaUpdateRes;


/* --- enums --- */


/* --- messages --- */

struct  _Version
{
  ProtobufCMessage base;
  /*
   * 版本
   */
  char *version;
};
#define VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&version__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _GetVersionRes
{
  ProtobufCMessage base;
  int32_t code;
  Version *version;
};
#define GET_VERSION_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_version_res__descriptor) \
    , 0, NULL }


struct  _OpOtaUpdate
{
  ProtobufCMessage base;
  /*
   * ota url
   */
  Google__Protobuf__StringValue *url;
};
#define OP_OTA_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&op_ota_update__descriptor) \
    , NULL }


struct  _OtaUpdateReq
{
  ProtobufCMessage base;
  OpOtaUpdate *ota;
};
#define OTA_UPDATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ota_update_req__descriptor) \
    , NULL }


struct  _OtaUpdateRes
{
  ProtobufCMessage base;
  int32_t code;
};
#define OTA_UPDATE_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ota_update_res__descriptor) \
    , 0 }


/* Version methods */
void   version__init
                     (Version         *message);
size_t version__get_packed_size
                     (const Version   *message);
size_t version__pack
                     (const Version   *message,
                      uint8_t             *out);
size_t version__pack_to_buffer
                     (const Version   *message,
                      ProtobufCBuffer     *buffer);
Version *
       version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   version__free_unpacked
                     (Version *message,
                      ProtobufCAllocator *allocator);
/* GetVersionRes methods */
void   get_version_res__init
                     (GetVersionRes         *message);
size_t get_version_res__get_packed_size
                     (const GetVersionRes   *message);
size_t get_version_res__pack
                     (const GetVersionRes   *message,
                      uint8_t             *out);
size_t get_version_res__pack_to_buffer
                     (const GetVersionRes   *message,
                      ProtobufCBuffer     *buffer);
GetVersionRes *
       get_version_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_version_res__free_unpacked
                     (GetVersionRes *message,
                      ProtobufCAllocator *allocator);
/* OpOtaUpdate methods */
void   op_ota_update__init
                     (OpOtaUpdate         *message);
size_t op_ota_update__get_packed_size
                     (const OpOtaUpdate   *message);
size_t op_ota_update__pack
                     (const OpOtaUpdate   *message,
                      uint8_t             *out);
size_t op_ota_update__pack_to_buffer
                     (const OpOtaUpdate   *message,
                      ProtobufCBuffer     *buffer);
OpOtaUpdate *
       op_ota_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   op_ota_update__free_unpacked
                     (OpOtaUpdate *message,
                      ProtobufCAllocator *allocator);
/* OtaUpdateReq methods */
void   ota_update_req__init
                     (OtaUpdateReq         *message);
size_t ota_update_req__get_packed_size
                     (const OtaUpdateReq   *message);
size_t ota_update_req__pack
                     (const OtaUpdateReq   *message,
                      uint8_t             *out);
size_t ota_update_req__pack_to_buffer
                     (const OtaUpdateReq   *message,
                      ProtobufCBuffer     *buffer);
OtaUpdateReq *
       ota_update_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ota_update_req__free_unpacked
                     (OtaUpdateReq *message,
                      ProtobufCAllocator *allocator);
/* OtaUpdateRes methods */
void   ota_update_res__init
                     (OtaUpdateRes         *message);
size_t ota_update_res__get_packed_size
                     (const OtaUpdateRes   *message);
size_t ota_update_res__pack
                     (const OtaUpdateRes   *message,
                      uint8_t             *out);
size_t ota_update_res__pack_to_buffer
                     (const OtaUpdateRes   *message,
                      ProtobufCBuffer     *buffer);
OtaUpdateRes *
       ota_update_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ota_update_res__free_unpacked
                     (OtaUpdateRes *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Version_Closure)
                 (const Version *message,
                  void *closure_data);
typedef void (*GetVersionRes_Closure)
                 (const GetVersionRes *message,
                  void *closure_data);
typedef void (*OpOtaUpdate_Closure)
                 (const OpOtaUpdate *message,
                  void *closure_data);
typedef void (*OtaUpdateReq_Closure)
                 (const OtaUpdateReq *message,
                  void *closure_data);
typedef void (*OtaUpdateRes_Closure)
                 (const OtaUpdateRes *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Service_Service Service_Service;
struct _Service_Service
{
  ProtobufCService base;
  void (*get_version)(Service_Service *service,
                      const Google__Protobuf__Empty *input,
                      GetVersionRes_Closure closure,
                      void *closure_data);
  void (*ota_update)(Service_Service *service,
                     const OtaUpdateReq *input,
                     OtaUpdateRes_Closure closure,
                     void *closure_data);
};
typedef void (*Service_ServiceDestroy)(Service_Service *);
void service__init (Service_Service *service,
                    Service_ServiceDestroy destroy);
#define SERVICE__BASE_INIT \
    { &service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SERVICE__INIT(function_prefix__) \
    { SERVICE__BASE_INIT,\
      function_prefix__ ## get_version,\
      function_prefix__ ## ota_update  }
void service__get_version(ProtobufCService *service,
                          const Google__Protobuf__Empty *input,
                          GetVersionRes_Closure closure,
                          void *closure_data);
void service__ota_update(ProtobufCService *service,
                         const OtaUpdateReq *input,
                         OtaUpdateRes_Closure closure,
                         void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor version__descriptor;
extern const ProtobufCMessageDescriptor get_version_res__descriptor;
extern const ProtobufCMessageDescriptor op_ota_update__descriptor;
extern const ProtobufCMessageDescriptor ota_update_req__descriptor;
extern const ProtobufCMessageDescriptor ota_update_res__descriptor;
extern const ProtobufCServiceDescriptor service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mt_5fproto_5fota_2eproto__INCLUDED */
