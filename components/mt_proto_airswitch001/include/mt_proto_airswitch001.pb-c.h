/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mt_proto_airswitch001.proto */

#ifndef PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED
#define PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/wrappers.pb-c.h"

typedef struct _State State;
typedef struct _OpState OpState;
typedef struct _Ctrl Ctrl;
typedef struct _Warn Warn;
typedef struct _Data Data;
typedef struct _Config Config;
typedef struct _OpConfig OpConfig;
typedef struct _Quality Quality;
typedef struct _OpQuality OpQuality;
typedef struct _GetReq GetReq;
typedef struct _SetRes SetRes;
typedef struct _GetStateRes GetStateRes;
typedef struct _GetCtrlRes GetCtrlRes;
typedef struct _GetWarnRes GetWarnRes;
typedef struct _GetDataRes GetDataRes;
typedef struct _GetConfigRes GetConfigRes;
typedef struct _GetQualityRes GetQualityRes;
typedef struct _SetStateReq SetStateReq;
typedef struct _SetConfigReq SetConfigReq;
typedef struct _SetQualityReq SetQualityReq;
typedef struct _SetLeakTestReq SetLeakTestReq;


/* --- enums --- */


/* --- messages --- */

struct  _State
{
  ProtobufCMessage base;
  /*
   * true:打开 false:关闭
   */
  protobuf_c_boolean data;
};
#define STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__descriptor) \
    , 0 }


struct  _OpState
{
  ProtobufCMessage base;
  /*
   * true:打开 false:关闭
   */
  Google__Protobuf__BoolValue *data;
};
#define OP_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&op_state__descriptor) \
    , NULL }


struct  _Ctrl
{
  ProtobufCMessage base;
  /*
   * true:可以控制 false:不能控制
   */
  protobuf_c_boolean data;
};
#define CTRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl__descriptor) \
    , 0 }


struct  _Warn
{
  ProtobufCMessage base;
  /*
   * 电流预警
   */
  protobuf_c_boolean notecurrent;
  /*
   * 漏电预警
   */
  protobuf_c_boolean noteleak;
  /*
   * 欠压预警
   */
  protobuf_c_boolean notevotagelow;
  /*
   * 过压预警
   */
  protobuf_c_boolean notevotagehigh;
  /*
   * 欠压报警
   */
  protobuf_c_boolean warnvotagelow;
  /*
   * 打火报警
   */
  protobuf_c_boolean warnfire;
  /*
   * 过压报警
   */
  protobuf_c_boolean warnvotagehigh;
  /*
   * 过流报警
   */
  protobuf_c_boolean warncurrent;
  /*
   * 漏电报警
   */
  protobuf_c_boolean warnleak;
  /*
   * 温度报警
   */
  protobuf_c_boolean warntemphigh;
  /*
   * 过载报警
   */
  protobuf_c_boolean warnpowrhigh;
  /*
   * 浪涌报警
   */
  protobuf_c_boolean warnwave;
  /*
   * 短路报警
   */
  protobuf_c_boolean warnshort;
};
#define WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&warn__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Data
{
  ProtobufCMessage base;
  /*
   * 电压 V
   */
  float votage;
  /*
   * 漏电流 A
   */
  float leakcurrent;
  /*
   * 功率 W
   */
  float power;
  /*
   * 温度 ℃
   */
  float temp;
  /*
   * 电流 A
   */
  float current;
  /*
   * 开关状态 true:打开 false:关闭
   */
  protobuf_c_boolean state;
  /*
   * 控制状态 true:可以控制 false:不能控制
   */
  protobuf_c_boolean ctrl;
};
#define DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _Config
{
  ProtobufCMessage base;
  /*
   * 电压上限 V
   */
  float votagehigh;
  /*
   * 电压下限 V 
   */
  float votagelow;
  /*
   * 漏电流上限 A
   */
  float leakcurrenthigh;
  /*
   * 功率上限 W
   */
  float powerhigh;
  /*
   * 温度上限 ℃
   */
  float temphigh;
  /*
   * 电流上限 A
   */
  float currenthigh;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _OpConfig
{
  ProtobufCMessage base;
  /*
   * 电压上限 V
   */
  Google__Protobuf__FloatValue *votagehigh;
  /*
   * 电压下限 V 
   */
  Google__Protobuf__FloatValue *votagelow;
  /*
   * 漏电流上限 A
   */
  Google__Protobuf__FloatValue *leakcurrenthigh;
  /*
   * 功率上限 W
   */
  Google__Protobuf__FloatValue *powerhigh;
  /*
   * 温度上限 ℃
   */
  Google__Protobuf__FloatValue *temphigh;
  /*
   * 电流上限 A
   */
  Google__Protobuf__FloatValue *currenthigh;
};
#define OP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&op_config__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Quality
{
  ProtobufCMessage base;
  /*
   * 电量 kwh
   */
  float quality;
};
#define QUALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quality__descriptor) \
    , 0 }


struct  _OpQuality
{
  ProtobufCMessage base;
  /*
   * 电量 kwh
   */
  Google__Protobuf__FloatValue *quality;
};
#define OP_QUALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&op_quality__descriptor) \
    , NULL }


struct  _GetReq
{
  ProtobufCMessage base;
  int32_t addr;
};
#define GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_req__descriptor) \
    , 0 }


struct  _SetRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
};
#define SET_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_res__descriptor) \
    , 0, 0 }


struct  _GetStateRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  State *state;
};
#define GET_STATE_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_state_res__descriptor) \
    , 0, 0, NULL }


struct  _GetCtrlRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  Ctrl *ctrl;
};
#define GET_CTRL_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_ctrl_res__descriptor) \
    , 0, 0, NULL }


struct  _GetWarnRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  Warn *warn;
};
#define GET_WARN_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_warn_res__descriptor) \
    , 0, 0, NULL }


struct  _GetDataRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  Data *data;
};
#define GET_DATA_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_data_res__descriptor) \
    , 0, 0, NULL }


struct  _GetConfigRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  Config *config;
};
#define GET_CONFIG_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_config_res__descriptor) \
    , 0, 0, NULL }


struct  _GetQualityRes
{
  ProtobufCMessage base;
  int32_t code;
  int32_t addr;
  Quality *quality;
};
#define GET_QUALITY_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_quality_res__descriptor) \
    , 0, 0, NULL }


struct  _SetStateReq
{
  ProtobufCMessage base;
  int32_t addr;
  OpState *state;
};
#define SET_STATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_state_req__descriptor) \
    , 0, NULL }


struct  _SetConfigReq
{
  ProtobufCMessage base;
  int32_t addr;
  OpConfig *config;
};
#define SET_CONFIG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_config_req__descriptor) \
    , 0, NULL }


struct  _SetQualityReq
{
  ProtobufCMessage base;
  int32_t addr;
  OpQuality *quality;
};
#define SET_QUALITY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_quality_req__descriptor) \
    , 0, NULL }


struct  _SetLeakTestReq
{
  ProtobufCMessage base;
  int32_t addr;
};
#define SET_LEAK_TEST_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_leak_test_req__descriptor) \
    , 0 }


/* State methods */
void   state__init
                     (State         *message);
size_t state__get_packed_size
                     (const State   *message);
size_t state__pack
                     (const State   *message,
                      uint8_t             *out);
size_t state__pack_to_buffer
                     (const State   *message,
                      ProtobufCBuffer     *buffer);
State *
       state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__free_unpacked
                     (State *message,
                      ProtobufCAllocator *allocator);
/* OpState methods */
void   op_state__init
                     (OpState         *message);
size_t op_state__get_packed_size
                     (const OpState   *message);
size_t op_state__pack
                     (const OpState   *message,
                      uint8_t             *out);
size_t op_state__pack_to_buffer
                     (const OpState   *message,
                      ProtobufCBuffer     *buffer);
OpState *
       op_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   op_state__free_unpacked
                     (OpState *message,
                      ProtobufCAllocator *allocator);
/* Ctrl methods */
void   ctrl__init
                     (Ctrl         *message);
size_t ctrl__get_packed_size
                     (const Ctrl   *message);
size_t ctrl__pack
                     (const Ctrl   *message,
                      uint8_t             *out);
size_t ctrl__pack_to_buffer
                     (const Ctrl   *message,
                      ProtobufCBuffer     *buffer);
Ctrl *
       ctrl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl__free_unpacked
                     (Ctrl *message,
                      ProtobufCAllocator *allocator);
/* Warn methods */
void   warn__init
                     (Warn         *message);
size_t warn__get_packed_size
                     (const Warn   *message);
size_t warn__pack
                     (const Warn   *message,
                      uint8_t             *out);
size_t warn__pack_to_buffer
                     (const Warn   *message,
                      ProtobufCBuffer     *buffer);
Warn *
       warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   warn__free_unpacked
                     (Warn *message,
                      ProtobufCAllocator *allocator);
/* Data methods */
void   data__init
                     (Data         *message);
size_t data__get_packed_size
                     (const Data   *message);
size_t data__pack
                     (const Data   *message,
                      uint8_t             *out);
size_t data__pack_to_buffer
                     (const Data   *message,
                      ProtobufCBuffer     *buffer);
Data *
       data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data__free_unpacked
                     (Data *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* OpConfig methods */
void   op_config__init
                     (OpConfig         *message);
size_t op_config__get_packed_size
                     (const OpConfig   *message);
size_t op_config__pack
                     (const OpConfig   *message,
                      uint8_t             *out);
size_t op_config__pack_to_buffer
                     (const OpConfig   *message,
                      ProtobufCBuffer     *buffer);
OpConfig *
       op_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   op_config__free_unpacked
                     (OpConfig *message,
                      ProtobufCAllocator *allocator);
/* Quality methods */
void   quality__init
                     (Quality         *message);
size_t quality__get_packed_size
                     (const Quality   *message);
size_t quality__pack
                     (const Quality   *message,
                      uint8_t             *out);
size_t quality__pack_to_buffer
                     (const Quality   *message,
                      ProtobufCBuffer     *buffer);
Quality *
       quality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quality__free_unpacked
                     (Quality *message,
                      ProtobufCAllocator *allocator);
/* OpQuality methods */
void   op_quality__init
                     (OpQuality         *message);
size_t op_quality__get_packed_size
                     (const OpQuality   *message);
size_t op_quality__pack
                     (const OpQuality   *message,
                      uint8_t             *out);
size_t op_quality__pack_to_buffer
                     (const OpQuality   *message,
                      ProtobufCBuffer     *buffer);
OpQuality *
       op_quality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   op_quality__free_unpacked
                     (OpQuality *message,
                      ProtobufCAllocator *allocator);
/* GetReq methods */
void   get_req__init
                     (GetReq         *message);
size_t get_req__get_packed_size
                     (const GetReq   *message);
size_t get_req__pack
                     (const GetReq   *message,
                      uint8_t             *out);
size_t get_req__pack_to_buffer
                     (const GetReq   *message,
                      ProtobufCBuffer     *buffer);
GetReq *
       get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_req__free_unpacked
                     (GetReq *message,
                      ProtobufCAllocator *allocator);
/* SetRes methods */
void   set_res__init
                     (SetRes         *message);
size_t set_res__get_packed_size
                     (const SetRes   *message);
size_t set_res__pack
                     (const SetRes   *message,
                      uint8_t             *out);
size_t set_res__pack_to_buffer
                     (const SetRes   *message,
                      ProtobufCBuffer     *buffer);
SetRes *
       set_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_res__free_unpacked
                     (SetRes *message,
                      ProtobufCAllocator *allocator);
/* GetStateRes methods */
void   get_state_res__init
                     (GetStateRes         *message);
size_t get_state_res__get_packed_size
                     (const GetStateRes   *message);
size_t get_state_res__pack
                     (const GetStateRes   *message,
                      uint8_t             *out);
size_t get_state_res__pack_to_buffer
                     (const GetStateRes   *message,
                      ProtobufCBuffer     *buffer);
GetStateRes *
       get_state_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_state_res__free_unpacked
                     (GetStateRes *message,
                      ProtobufCAllocator *allocator);
/* GetCtrlRes methods */
void   get_ctrl_res__init
                     (GetCtrlRes         *message);
size_t get_ctrl_res__get_packed_size
                     (const GetCtrlRes   *message);
size_t get_ctrl_res__pack
                     (const GetCtrlRes   *message,
                      uint8_t             *out);
size_t get_ctrl_res__pack_to_buffer
                     (const GetCtrlRes   *message,
                      ProtobufCBuffer     *buffer);
GetCtrlRes *
       get_ctrl_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_ctrl_res__free_unpacked
                     (GetCtrlRes *message,
                      ProtobufCAllocator *allocator);
/* GetWarnRes methods */
void   get_warn_res__init
                     (GetWarnRes         *message);
size_t get_warn_res__get_packed_size
                     (const GetWarnRes   *message);
size_t get_warn_res__pack
                     (const GetWarnRes   *message,
                      uint8_t             *out);
size_t get_warn_res__pack_to_buffer
                     (const GetWarnRes   *message,
                      ProtobufCBuffer     *buffer);
GetWarnRes *
       get_warn_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_warn_res__free_unpacked
                     (GetWarnRes *message,
                      ProtobufCAllocator *allocator);
/* GetDataRes methods */
void   get_data_res__init
                     (GetDataRes         *message);
size_t get_data_res__get_packed_size
                     (const GetDataRes   *message);
size_t get_data_res__pack
                     (const GetDataRes   *message,
                      uint8_t             *out);
size_t get_data_res__pack_to_buffer
                     (const GetDataRes   *message,
                      ProtobufCBuffer     *buffer);
GetDataRes *
       get_data_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_data_res__free_unpacked
                     (GetDataRes *message,
                      ProtobufCAllocator *allocator);
/* GetConfigRes methods */
void   get_config_res__init
                     (GetConfigRes         *message);
size_t get_config_res__get_packed_size
                     (const GetConfigRes   *message);
size_t get_config_res__pack
                     (const GetConfigRes   *message,
                      uint8_t             *out);
size_t get_config_res__pack_to_buffer
                     (const GetConfigRes   *message,
                      ProtobufCBuffer     *buffer);
GetConfigRes *
       get_config_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_config_res__free_unpacked
                     (GetConfigRes *message,
                      ProtobufCAllocator *allocator);
/* GetQualityRes methods */
void   get_quality_res__init
                     (GetQualityRes         *message);
size_t get_quality_res__get_packed_size
                     (const GetQualityRes   *message);
size_t get_quality_res__pack
                     (const GetQualityRes   *message,
                      uint8_t             *out);
size_t get_quality_res__pack_to_buffer
                     (const GetQualityRes   *message,
                      ProtobufCBuffer     *buffer);
GetQualityRes *
       get_quality_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_quality_res__free_unpacked
                     (GetQualityRes *message,
                      ProtobufCAllocator *allocator);
/* SetStateReq methods */
void   set_state_req__init
                     (SetStateReq         *message);
size_t set_state_req__get_packed_size
                     (const SetStateReq   *message);
size_t set_state_req__pack
                     (const SetStateReq   *message,
                      uint8_t             *out);
size_t set_state_req__pack_to_buffer
                     (const SetStateReq   *message,
                      ProtobufCBuffer     *buffer);
SetStateReq *
       set_state_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_state_req__free_unpacked
                     (SetStateReq *message,
                      ProtobufCAllocator *allocator);
/* SetConfigReq methods */
void   set_config_req__init
                     (SetConfigReq         *message);
size_t set_config_req__get_packed_size
                     (const SetConfigReq   *message);
size_t set_config_req__pack
                     (const SetConfigReq   *message,
                      uint8_t             *out);
size_t set_config_req__pack_to_buffer
                     (const SetConfigReq   *message,
                      ProtobufCBuffer     *buffer);
SetConfigReq *
       set_config_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_config_req__free_unpacked
                     (SetConfigReq *message,
                      ProtobufCAllocator *allocator);
/* SetQualityReq methods */
void   set_quality_req__init
                     (SetQualityReq         *message);
size_t set_quality_req__get_packed_size
                     (const SetQualityReq   *message);
size_t set_quality_req__pack
                     (const SetQualityReq   *message,
                      uint8_t             *out);
size_t set_quality_req__pack_to_buffer
                     (const SetQualityReq   *message,
                      ProtobufCBuffer     *buffer);
SetQualityReq *
       set_quality_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_quality_req__free_unpacked
                     (SetQualityReq *message,
                      ProtobufCAllocator *allocator);
/* SetLeakTestReq methods */
void   set_leak_test_req__init
                     (SetLeakTestReq         *message);
size_t set_leak_test_req__get_packed_size
                     (const SetLeakTestReq   *message);
size_t set_leak_test_req__pack
                     (const SetLeakTestReq   *message,
                      uint8_t             *out);
size_t set_leak_test_req__pack_to_buffer
                     (const SetLeakTestReq   *message,
                      ProtobufCBuffer     *buffer);
SetLeakTestReq *
       set_leak_test_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_leak_test_req__free_unpacked
                     (SetLeakTestReq *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*State_Closure)
                 (const State *message,
                  void *closure_data);
typedef void (*OpState_Closure)
                 (const OpState *message,
                  void *closure_data);
typedef void (*Ctrl_Closure)
                 (const Ctrl *message,
                  void *closure_data);
typedef void (*Warn_Closure)
                 (const Warn *message,
                  void *closure_data);
typedef void (*Data_Closure)
                 (const Data *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);
typedef void (*OpConfig_Closure)
                 (const OpConfig *message,
                  void *closure_data);
typedef void (*Quality_Closure)
                 (const Quality *message,
                  void *closure_data);
typedef void (*OpQuality_Closure)
                 (const OpQuality *message,
                  void *closure_data);
typedef void (*GetReq_Closure)
                 (const GetReq *message,
                  void *closure_data);
typedef void (*SetRes_Closure)
                 (const SetRes *message,
                  void *closure_data);
typedef void (*GetStateRes_Closure)
                 (const GetStateRes *message,
                  void *closure_data);
typedef void (*GetCtrlRes_Closure)
                 (const GetCtrlRes *message,
                  void *closure_data);
typedef void (*GetWarnRes_Closure)
                 (const GetWarnRes *message,
                  void *closure_data);
typedef void (*GetDataRes_Closure)
                 (const GetDataRes *message,
                  void *closure_data);
typedef void (*GetConfigRes_Closure)
                 (const GetConfigRes *message,
                  void *closure_data);
typedef void (*GetQualityRes_Closure)
                 (const GetQualityRes *message,
                  void *closure_data);
typedef void (*SetStateReq_Closure)
                 (const SetStateReq *message,
                  void *closure_data);
typedef void (*SetConfigReq_Closure)
                 (const SetConfigReq *message,
                  void *closure_data);
typedef void (*SetQualityReq_Closure)
                 (const SetQualityReq *message,
                  void *closure_data);
typedef void (*SetLeakTestReq_Closure)
                 (const SetLeakTestReq *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Service_Service Service_Service;
struct _Service_Service
{
  ProtobufCService base;
  void (*get_state)(Service_Service *service,
                    const GetReq *input,
                    GetStateRes_Closure closure,
                    void *closure_data);
  void (*get_ctrl)(Service_Service *service,
                   const GetReq *input,
                   GetCtrlRes_Closure closure,
                   void *closure_data);
  void (*get_warn)(Service_Service *service,
                   const GetReq *input,
                   GetWarnRes_Closure closure,
                   void *closure_data);
  void (*get_data)(Service_Service *service,
                   const GetReq *input,
                   GetDataRes_Closure closure,
                   void *closure_data);
  void (*get_config)(Service_Service *service,
                     const GetReq *input,
                     GetConfigRes_Closure closure,
                     void *closure_data);
  void (*get_quality)(Service_Service *service,
                      const GetReq *input,
                      GetQualityRes_Closure closure,
                      void *closure_data);
  void (*set_state)(Service_Service *service,
                    const SetStateReq *input,
                    SetRes_Closure closure,
                    void *closure_data);
  void (*set_config)(Service_Service *service,
                     const SetConfigReq *input,
                     SetRes_Closure closure,
                     void *closure_data);
  void (*set_quality)(Service_Service *service,
                      const SetQualityReq *input,
                      SetRes_Closure closure,
                      void *closure_data);
  void (*set_leak_test)(Service_Service *service,
                        const SetLeakTestReq *input,
                        SetRes_Closure closure,
                        void *closure_data);
};
typedef void (*Service_ServiceDestroy)(Service_Service *);
void service__init (Service_Service *service,
                    Service_ServiceDestroy destroy);
#define SERVICE__BASE_INIT \
    { &service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SERVICE__INIT(function_prefix__) \
    { SERVICE__BASE_INIT,\
      function_prefix__ ## get_state,\
      function_prefix__ ## get_ctrl,\
      function_prefix__ ## get_warn,\
      function_prefix__ ## get_data,\
      function_prefix__ ## get_config,\
      function_prefix__ ## get_quality,\
      function_prefix__ ## set_state,\
      function_prefix__ ## set_config,\
      function_prefix__ ## set_quality,\
      function_prefix__ ## set_leak_test  }
void service__get_state(ProtobufCService *service,
                        const GetReq *input,
                        GetStateRes_Closure closure,
                        void *closure_data);
void service__get_ctrl(ProtobufCService *service,
                       const GetReq *input,
                       GetCtrlRes_Closure closure,
                       void *closure_data);
void service__get_warn(ProtobufCService *service,
                       const GetReq *input,
                       GetWarnRes_Closure closure,
                       void *closure_data);
void service__get_data(ProtobufCService *service,
                       const GetReq *input,
                       GetDataRes_Closure closure,
                       void *closure_data);
void service__get_config(ProtobufCService *service,
                         const GetReq *input,
                         GetConfigRes_Closure closure,
                         void *closure_data);
void service__get_quality(ProtobufCService *service,
                          const GetReq *input,
                          GetQualityRes_Closure closure,
                          void *closure_data);
void service__set_state(ProtobufCService *service,
                        const SetStateReq *input,
                        SetRes_Closure closure,
                        void *closure_data);
void service__set_config(ProtobufCService *service,
                         const SetConfigReq *input,
                         SetRes_Closure closure,
                         void *closure_data);
void service__set_quality(ProtobufCService *service,
                          const SetQualityReq *input,
                          SetRes_Closure closure,
                          void *closure_data);
void service__set_leak_test(ProtobufCService *service,
                            const SetLeakTestReq *input,
                            SetRes_Closure closure,
                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor state__descriptor;
extern const ProtobufCMessageDescriptor op_state__descriptor;
extern const ProtobufCMessageDescriptor ctrl__descriptor;
extern const ProtobufCMessageDescriptor warn__descriptor;
extern const ProtobufCMessageDescriptor data__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;
extern const ProtobufCMessageDescriptor op_config__descriptor;
extern const ProtobufCMessageDescriptor quality__descriptor;
extern const ProtobufCMessageDescriptor op_quality__descriptor;
extern const ProtobufCMessageDescriptor get_req__descriptor;
extern const ProtobufCMessageDescriptor set_res__descriptor;
extern const ProtobufCMessageDescriptor get_state_res__descriptor;
extern const ProtobufCMessageDescriptor get_ctrl_res__descriptor;
extern const ProtobufCMessageDescriptor get_warn_res__descriptor;
extern const ProtobufCMessageDescriptor get_data_res__descriptor;
extern const ProtobufCMessageDescriptor get_config_res__descriptor;
extern const ProtobufCMessageDescriptor get_quality_res__descriptor;
extern const ProtobufCMessageDescriptor set_state_req__descriptor;
extern const ProtobufCMessageDescriptor set_config_req__descriptor;
extern const ProtobufCMessageDescriptor set_quality_req__descriptor;
extern const ProtobufCMessageDescriptor set_leak_test_req__descriptor;
extern const ProtobufCServiceDescriptor service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mt_5fproto_5fairswitch001_2eproto__INCLUDED */
